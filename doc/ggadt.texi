\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ggadt.info
@include version.texi
@settitle GGADT @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header

@copying
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying
@c If your manual is published on paper by the FSF, it should include
@c the standard FSF Front-Cover and Back-Cover Texts, as given in
@c maintain.texi.

@dircategory Basics
@direntry
* GGADT: (ggadt).        
@end direntry

@titlepage
@title GGADT
@subtitle for version @value{VERSION}, @value{UPDATED}
@author John Hoffman (@email{jah5@@princeton.edu}), Michael Tarczon (@email{mtarczon@@princeton.edu})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top
@top GGADT
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 
@end ifnottex

@menu
* Overview::		General purpose and information.
* Installation::	How to install @command{ggadt} on your system.
* Invoking ggadt::	Giving @command{ggadt} your input.	
* Example usage::	Quick examples to get you started.
* Benchmarking::	Test speed
* Plotting::		Using python (>=2.7 with matplotlib functionality)
* GNU Free Documentation License:: Copying and sharing this documentation.
* Concept index::	Index of concepts.
@end menu


@node Overview
@chapter Overview

@cindex greetings
@cindex overview

The @command{ggadt} program calculates the x-ray scattering properties of dust
in the interstellar medium. You define the geometry and composition
of a dust grain, the energy of the incident x-ray photons, and a few other parameters. 
The @command{ggadt} program then calculates the orientationally-averaged scattering 
cross-section in the plane perpendicular to the incident photons. 

@cindex authors
@cindex Hoffman, John
@cindex Tarczon, Michael
GGADT was written by John Hoffman and Michael Tarczon.

@menu
* Language::				Comment about the usage of Fortran 2003
* Scientific relevance::	What astrophysical problems GGADT may help investigate
@end menu



@node Language
@section Language
@cindex Fortran 2003

GGADT is written in Fortran, using the Fortran 2003 standard. In the future, 
GGADT may be changed to comply with earlier Fortran standards (90 or 95) for
compatibility reasons. Most importantly, this will allow for easier implementation
of an MPI version of GGADT. 

Fortran 2003 provides an easy way to interface Fortran programs with C 
libraries. In this case, Fortran 2003 made the FFTW3 library (@url{http://www.fftw.org/})
easy to implement for performing fast Fourier transforms. FFTW3 is a well-tested, optimized, 
and popular suite for performing FFT's.

@node Scientific relevance
@section Scientific relevance
@cindex relevance
@cindex interstellar medium
@cindex astrophysics

The ISM


@node Installation
@chapter Installation

@cindex installing
@cindex configure
@cindex enable-openmp
@cindex enable-mpi

@section System requirements
GGADT should install easily on most @emph{Unix-based systems} (e.g. Linux, Mac) by following the standard GNU install procedures, described in @file{INSTALL}.

@code{./configure [--enable-openmp]} @dots{}
@code{make}
@code{make install}



@section Package dependencies


@itemize @bullet

@item @strong{FFTW 3+}
@itemize @minus
@item If you wish to use the OpenMP variant of GGADT, you must have the @code{fftw3_omp} libraries installed
@item In order for GGADT to find the Fortran headers for FFTW3, they must be in the standard location (@code{/usr/local/include} or @code{usr/include}) or in @code{$prefix/include} where @code{$prefix} is defined by doing @code{./configure --prefix=<prefix>} @dots{}.

@end itemize

@item For the OpenMP version of GGADT, you must have C and Fortran compilers that are compatible with OpenMP 4.0. This version of GGADT was tested with the GNU C and Fortran compilers (@code{gcc}, @code{gfortran}) version 4.9. @strong{Attention Mac users:} You must have the command line tools from XCode installed, but beware of your supplied version of @code{gcc} -- it is NOT going to work for compiling the OpenMP version of GGADT. The version of GCC that you get with XCode is a front-end for the @code{clang} compiler and is quite dated. We recommend obtaining later versions of GNU compilers, which you can find here: @url{http://hpc.sourceforge.net/}.
@item Python >=2.7 for some of the included scripts.
@item matplotlib python library if you wish to use the included plotting scripts.
@end itemize



@node Invoking ggadt
@chapter Invoking ggadt

@cindex invoking
@cindex options
@cindex usage
@cindex help

The format for running the @command{hello} program is:

@example
hello @var{option} @dots{}
@end example

With no options, @command{hello} prints the greeting @samp{Hello,
world!}.

@command{hello} supports the following options:

@table @option
@item --greeting=@var{text}
@itemx -g @var{text}
@opindex --greeting
@opindex -g
Output @var{text} instead of the default greeting.

@item --help
@itemx -h
@opindex --help
@opindex -h
Print an informative help message on standard output and exit
successfully.

@cindex environment variables, help for
@c This comment prevents `make syntax-check' from diagnosing a doubled word "for\nFor"
For the @option{--help} output of GNU programs, it's strongly
encouraged to include a brief (one or two sentences) description of
what the program does, as well as the synopsis of how to run the
program.  Any environment variables which affect execution should also
be mentioned (Hello doesn't have any).

@item --next-generation
@itemx -n
@opindex --next-generation
@opindex -n
Output the greeting, but possibly including box-drawing
characters or other fancy stuff, especially in translated locales.
(If you would like to volunteer to translate messages for GNU packages,
please see @url{http://translationproject.org}.)

@item --traditional
@itemx -t
@opindex --traditional
@opindex -t
@cindex traditional
@cindex modern
Output the traditional greeting message @samp{hello, world}.

@item --version
@itemx -v
@opindex --version
@opindex -v
Print the version number and licensing information of Hello on
standard output and then exit successfully.

@end table

If more than one of the greeting options (@option{-g}, @option{-n},
@option{-t}, and their long-named equivalents) is specified, whichever
comes last takes precedence.


@node Example usage
@chapter Example usage

@cindex sample output
@cindex examples

Here are some examples of running GNU Hello.

This is the output of the command @samp{hello}:

@example
Hello, world!
@end example

This is the output of the command @samp{hello --traditional}:

@example
hello, world
@end example

This is the output of the command @samp{hello --greeting=hi}:

@example
hi
@end example


@node Benchmarking
@chapter Benchmarking

@node Plotting
@chapter Plotting

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi


@node Concept index
@unnumbered Concept index

@printindex cp

@bye
