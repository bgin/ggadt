\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ggadt.info
@documentencoding UTF-8
@include version.texi
@settitle GGADT @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header
@html
<script type="text/javascript"
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
@end html
@copying
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying
@c If your manual is published on paper by the FSF, it should include
@c the standard FSF Front-Cover and Back-Cover Texts, as given in
@c maintain.texi.

@dircategory Basics
@direntry
* GGADT: (ggadt).        
@end direntry

@titlepage
@title GGADT
@subtitle for version @value{VERSION}, @value{UPDATED}
@author John Hoffman (@email{jah5@@princeton.edu}), Michael Tarczon (@email{mtarczon@@princeton.edu})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex

@node Top

@top GGADT
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 
@end ifnottex

@menu
* Overview::		General purpose and information.
* Installation::	How to install @command{ggadt} on your system.
* Invoking GGADT::	Giving @command{ggadt} your input.	
* Example usage::	Quick examples to get you started.
* Testing against previous results::  Comparing GGADT to existing literature
* FFT comparison::		Comparison between GPFA and FFTW3 timing.
* GNU Free Documentation License:: Copying and sharing this documentation.
* Concept index::	Index of concepts.
@end menu


@node Overview
@html
<script type="text/javascript"
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
@end html
@chapter Overview

@cindex greetings
@cindex overview

GGADT stands for General Geometry Anomalous Diffraction Theory, and is Fortran 95 compliant. GGADT allows a user to specify a custom dust geometry (either a spheroid, sphere, an agglomeration of spherical monomers, or a custom user-defined grain geometry), and calculates either the differential scattering cross section as a function of scattering angle, or the energy-dependent absorption and scattering cross sections. Anomalous diffraction theory is valid when \(ka \gg 1\), where \(k\) is the wavenumber of the incident photon, and \(a\) is the ``effective radius" of the grain, defined to be the radius of a sphere that has the same volume as the grain.

@cindex authors
@cindex Hoffman, John
@cindex Tarczon, Michael
GGADT was written by John Hoffman and Michael Tarczon.



@section Background
@cindex background
@cindex interstellar medium
@cindex astrophysics

@subsection Dust in the interstellar medium (ISM)

The interstellar medium (ISM) refers to everything that occupies the space between stars in a galaxy. The ISM of the Milky Way contains rich physics and is an active area of astrophysical research. Dust, molecules, gas, radiation, cosmic rays -- all of these are important constituents of the ISM, and all of these constituents play roles of varying dyanmical importance, depending on the local ISM environment in question.@footnote{Draine, Bruce T., Physics of the Interstellar and Intergalactic Medium, 2011, Princeton University Press, NJ.}.

One area of active research in ISM physics is determining the size distribution and composition of interstellar dust. One way to probe the size distributions and dust composition is by measuring how ISM dust interacts with x-ray radiation.@footnote{Overbeck, J.W. 1965, ApJ, 141, 864}@footnote{Hayakawa, S. 1970, Prog. Theor. Phys., 43, 1224}@footnote{Martin, P.G. 1970, MNRAS, 149, 221} When looking at an x-ray source through interstellar dust, the scattering properties of the intermediate dust create an x-ray ``halo'' around the source.@footnote{Draine, B.T. 2003, ApJ, 598, 1026}.

GGADT is designed to be a tool to test dust models against observations of x-ray halos and x-ray attenuation. Since the size of a typical dust grain (0.1 \(\mu\)m) is large compared to typical x-ray wavelengths (1 nm), an approximation known as Anomalous Diffraction Theory (ADT)@footnote{van de Hulst H., Light scattering by small particles, 1957, J.Wiley & Sons, NY.} can be used to calculate the absorption and scattering properties of dust grains@footnote{Draine, B.T. and Allaf-Akbari, K. 2006, ApJ, 652, 1318}.

@subsection Anomalous Diffraction Theory (ADT)

The mathematics of what GGADT does is best explained in Draine and Allaf-Akbari 2006; we include a portion of that paper below.
@quotation

At X-ray energies materials have refractive indices very close to unity (\(|m - 1| \ll 1\)), and the dust grains responsible for most of the scattering are usually much larger than the wavelength of the incoming radiation (\(ka \gg 1\) [\(k\) is the wavenumber of the incident radiation, a is the effective radius of the grain]). In this regime, the scattering and absorption of X-rays can be calculated using an approximation first developed by van de Hulst (1957) and known as anomalous diffraction theory (ADT). ADT is a combination of ray-tracing optics (applicable because \(ka \gg 1\) and Huygens' principle of propagation of a scalar field, applied to cases in which the electromagnetic wave can enter and propagate through the grain with essentially no reflection or refraction (\(|m - 1| \ll 1\)).

Consider an incident plane wave \(U_@{inc@} = U_0\exp(ikz)\), propagating in the \(\hat@{z@}\)-direction. Under the conditions above, the plane wave, once reaching a plane \(V\) located just beyond the grain and normal to the direction of the propagation of the incident wave, will have changed by a fractional amount that we refer to as the @emph{shadow function}, \(f(x,y)\): 
\[
f(x,y) = 1-\phi(x,y)
\]

where the complex phase function phi is 

\[
\phi(x,y) = k\int_@{-\infty@}^@{\infty@}[1-m(x,y,z)]dz
\]

where \(m(x,y,z)\) is the refractive index at the point \((x,y,z)\).

Once the shadow function is known, Huygens' principle allows the amplitude of the scattered part of the wave, in the radiation zone, to be calculated as a Fourier transform of the shadow function over the plane \(V\): 

@set nhat \hat@{n@}
\[
U_@{sca@}(r@value{nhat}) = U_0\frac@{\exp@{(ikr)@}@}@{kr@}S(@value{nhat})
\]
\[
S(@value{nhat}) = S(k_x, k_y) = \frac@{k^2@}@{2\pi@}\int \exp@{[i(k_xx+k_yy)]@}f(x,y)dxdy
\]
\[
k_x = k(@value{nhat}\cdot\vec@{x@}),~k_y = k(@value{nhat}\cdot\vec@{y@})
\]

The scattering properties of the grain can be obtained from \(S(@value{nhat}\), with the differential scattering cross section given by 

\[
\frac@{d\sigma_@{sca@}@}@{d\Omega@}(@value{nhat}) = \frac@{|S(@value{nhat})|^2@}@{k^2@}
\]
 @author Draine and Allaf-Akbari 2006
@end quotation

@section Basic GGADT logic outline

GGADT does the following:

@enumerate

@item Reads in dust parameters and photon energy (from command line or from a parameter file)
@item For each of the @option{norientations} orientations
@enumerate
@item Calculate the shadow function of the grain on a 2D grid
@item Calculate either σ(E) or dσ/dΩ(θx,θy) for this orientation
@end enumerate
@item Averages calculation over all orientations
@item Output orientationally dσ/dΩ(θx,θy) (if calculating full 2d differential scattering cross section) or dσ/dΩ(θ) (if axisymmetry is assumed, as is the case in the limit where @option{norientations} goes to infinity) or the energy dependent absorption and scattering cross sections (σ(E,abs), σ(E,sca))

@end enumerate


@node Installation
@chapter Installation

@cindex installing
@cindex configure
@cindex enable-openmp
@cindex enable-fftw3
@cindex gcc 

@section System requirements
GGADT should install easily on most @emph{Unix-based systems} (e.g. Linux, Mac) by following the standard GNU install procedures, described in @file{INSTALL}.

@example
./configure [--enable-openmp] [--enable-fftw3] @dots{}
make
@end example

The @code{ggadt} binary is now located in the @code{src} directory. An optional next step is to do @code{make install}, which installs the ggadt into a globally-accessible folder (usually @code{/usr/local/bin}). If you would like to do this, fine, but we prefer a more self-contained setup. We will assume for the remainder of the documentation that you did @emph{not} do a @code{make install}.

If you did do @code{make install}, you can undo it by running @code{make uninstall}. To clean and remake GGADT, simply do @code{make clean} and then @code{make}.

It should give you a slight (5 - 10%) speed advantage to use @code{-O3} optimization. We tried using @code{-Ofast}, but this produced a segfault for moderately large 2d grid sizes, and we didn't spend too much time trying to figure out why. So, you can use @code{-Ofast} for a little extra @emph{oomph}, but just know that things might break unexpectedly (the normal, 1d case worked fine for us).

@example
./configure FCFLAGS="-O3" [--enable-openmp] [--enable-fftw3] @dots{}
@end example

Note

@section Package dependencies

If you would like to use a particular Fortran compiler, you may specify one by adding @code{FC=/path/to/compiler} to the @code{configure} arguments.

@itemize @bullet

@item @strong{Suitable C and Fortran compilers}: GGADT was developed using the GNU compiler suite (version 4.5.4 and higher) throughout, but the @code{configure} script will try to work with most common compilers. GGADT has been tested to compile on versions 4.3 and later of gfortran. If you experience any compilation problems, please let John Hoffman know!

@item (@emph{Optional}) @strong{FFTW 3}. Available at @url{http://www.fftw.org/}. If you'd prefer not to use the Generalized Prime Factor Algorithm@footnote{Clive Temperton. Self-sorting mixed-radix fast Fourier transforms. @emph{Journal of Computational Physics}, 52(1):1--23, 1983.}, GGADT also supports FFTW3. 

@itemize @bullet

@item To use FFTW3 instead of GPFA, pass the @code{--enable-fftw3} flag to @code{configure}. 

@item Though FFTW is widely used and highly optimized, we find that GPFA beats FFTW in almost every case, and has the advantage that it's much simpler to use than FFTW (which has @emph{wisdom} files to keep track of and additional installation headaches). 

@item @strong{Parallel FFTW3} If you would like to utilize parallelized FFTW, you must pass either @code{--enable-threads} and/or @code{--enable-openmp} to the @code{configure} script of your FFTW3 installation. 

We haven't had a problem on our system (Mac OS X v10.9.5, gfortran 4.9.2_1 installed with Macports), but this is a potential source of problems; some systems may not have OpenMP support for FFTW3 and instead require the use of the @code{pthreads} (or some other) library, and our configuration script does @emph{not} handle this. You're on your own if this is the case. The good news is that FFTW gives at best a negligible increase in speed, and openmp/parallelization does not increase the speed dramatically. In almost every case, you should be perfectly happy with a serial setup.
@end itemize

@itemize @minus

@item @emph{Location of the FFTW3 headers}: In order for GGADT to find the Fortran headers for FFTW3, they must be in the standard location (@code{/usr/local/include} or @code{usr/include}) or in @code{$prefix/include} where @code{$prefix} is defined by doing @code{./configure --prefix=<prefix>} at the configuration step for @code{ggadt}. If you have FFTW3 installed with MacPorts, the configure script should be able to find it for you. However, if you have MacPorts installed in a non-standard location (i.e. not @code{/opt}), it would behoove you to pass the @code{macports_prefix=...} argument to the @code{configure} script.

@end itemize



@itemize @minus

@item @strong{OpenMP}: For the OpenMP version of GGADT, you must have C and Fortran compilers that are compatible with OpenMP version 4.0. 

@end itemize

@item @strong{Mac users}
@itemize @minus

@item Install the latest edition of @strong{XCode command-line tools}. As of Mac OSX v10.9.1, the command-line tools are not included in XCode automatically, so you have to do this on your own.
@item @strong{Macports} is highly recommended. It provides a convenient, safe package manager for Mac (unofficial, of course). To set up an environment condusive to compiling and running @code{ggadt}, do the following from the terminal:
@enumerate
@item Download and install macports from @url{http://www.macports.org/}.
@item Install gcc (4.5.4 or higher is recommended), and the FFTW3 library if you want:
@example
sudo port install gcc45
sudo port install fftw-3 (optional)
@end example
@item Set the gcc compiler: @code{sudo port select --set gcc mp-gcc45}
@end enumerate
@end itemize
@item (@emph{Optional}) @strong{Python 2.7} or later for some of the included scripts.
@item (@emph{Optional}) @strong{matplotlib},@strong{numpy}, @strong{scipy} python librarys if you wish to use the included plotting scripts. More information can be found at @url{http://scipy.org/getting-started.html}.
@end itemize



@node Invoking GGADT
@chapter Invoking GGADT

@cindex invoking
@cindex options
@cindex usage
@cindex help

To see usage and all available options for @code{ggadt}, simply use the @option{h} option:

@example
ggadt -h
@end example

@section Setting parameter values

The format for running the @command{ggadt} program is:

@example
ggadt @var{option} @dots{}
@end example

With no options, @command{ggadt} runs calculations on a set of default grain parameters (specified in the @code{.defaults} file). By default GGADT will calculate the differential scattering cross section as a function of scattering angle. To calculate the integrated scattering and absorption cross sections for a range of energies, add the @code{--integrated} flag as a command-line argument.

Parameters may be specified as command-line arguments, 

@example
ggadt --parameter=value @dots{}
@end example

or in a parameter file that is specified as a command-line argument,

@example
ggadt --parameter-file=/path/to/parameterfile
@end example

or a combination of the two:

@example
ggadt --parameter-file=/path/to/parametefile --parameter=value @dots{}
@end example

If a parameter is set by a command-line argument @emph{and} by a parameter file, the command-line argument is used. 

@section Parameter file syntax

The syntax of parameter files is:

@example
#comment
parameter           = value
another-parameter   = another-value
@dots{}
@end example

@strong{Warning (1)} One annoying feature of parameter file syntax is this: @strong{you cannot have spaces after a numerical parameter value}. This is somewhat of a low-priority bug for the time being.

@strong{Warning (2)} The @code{agglom-file-name} and @code{euler-file-name} options must be specified with quotes surrounding their values. In order to make the parameter file portable, you should specify an absolute file path, not a relative one.



E.g.:

@example
agglom-file='/absolute/path/to/parameter-file.ini'
@end example 

NOT

@example
agglom-file=/absolute/path/to/parameter-file.ini
@end example 

or

@example
agglom-file='../../parameter-file.ini'
@end example 

Specifying a relative file-path (as in the last example) will work, as long as you always invoke GGADT from the location where the relative file-path is valid. For example, if I am in the parent directory, and my parameter file is in the @code{data/parameter-files} directory, 

@example
agglom-file='data/parameter-files/parameter-file.ini'
@end example 

will work, as long as I @strong{always} run @code{ggadt} from the parent directory.



@section Options and parameters


@command{ggadt} supports the following options:

@subsection General options

@cindex environment variables, help for

@table @option
@item --help
@itemx -h
@opindex --help
@opindex -h
The `help' screen--prints usage information and available options.

@item --version
@itemx -v
@opindex --version
@opindex -v
Print the version number of GGADT on
standard output and then exit successfully.

@item --verbose
@itemx -d
@opindex --verbose
@opindex -d
Be extra loud (useful for debugging)


@item --quiet
@itemx -q
@opindex --quiet
@opindex -q
Do not print progress. GGADT by default will print out a @code{percent complete: XX.X%} statement during runtime; this option suppresses that.

@item --timing
@itemx -t
@opindex --timing
@opindex -t
Do not output data. No I/O is useful if you care about measuring the runtime of GGADT.

@item --use-padded-fft
@itemx -s
@opindex --use-padded-fft
@opindex -s 
This will force GGADT to do only one FFT. In order to provide you with the desired angular resolution of the differential cross section (set by @code{nscatter}), GGADT will pad the 2-d grid on which the shadow function is defined. Forcing GGADT to use a padded FFT, instead of the more efficient method without padding, will run much slower.


@item --force-numerical
@opindex --force-numerical 
This will force GGADT to use a numerical calculation of the differential scattering cross section for spherical grains (an analytical Anomalous Diffraction Theory solution is implemented by default).

@item --do-full-2d-fft
@opindex --do-full-2d-fft
Do not utilize the fact that you can make a 2d FFT a 1d FFT if you only care about the orientationally averaged value of dσ/dΩ(θ)

@item --parameter-file=@var{value}
@opindex --parameter-file
Path to a correctly formatted parameter file.

@item --grain-geometry=@var{value}
@opindex --grain-geometry
Geometry of dust grain. Must be one of @code{SPHERE}, @code{ELLIPSOID}, @code{CUSTOM} @code{SPHERES} (or equivalently, @code{AGGLOMERATION}). A @code{SPHERES} grain geometry means that your grain is a conglomerate of smaller spheres. If you wish to use this grain geometry, you should supply a file (hereafter called a ``@emph{agglomeration file}", see the next option) that defines the relative positions of the spheres that make up the grain. The sizes of these spheres will be normalized so that the effective radius of the grain is consistent with @option{aeff}.  

@item --aeff=@var{value}
@opindex --aeff
Effective radius of dust grain. The effective radius is defined to be the radius of a sphere with the same volume as the dust grain.

@item --ngrain=@var{value}
@opindex --ngrain
The (square root) of the number of grid elements with which you would like to resolve your grain. To get accurate results out to about 4000 arcseconds, we've found that a value of 64 is good enough.

@item --norientations=@var{value}
@opindex --norientations
The number of grain orientations relative to the incoming X-ray photon over which to average the differential cross-section.

@item --axes-convention=@var{value}
@opindex --axes-convention
The axes convention to use. Must be one of @code{DDSCAT} or @code{MSTM}. These conventions are explained later in the documentation. 

@item --fftw-optimization=@var{value}
@opindex --fftw-optimization
Must be one of @code{ESTIMATE}, @code{MEASURE}, @code{PATIENT} or @code{EXHAUSTIVE}. For more information about what these tags mean and about FFTW wisdom, see @url{http://fftw.org/fftw3_doc/Words-of-Wisdom_002dSaving-Plans.html#Words-of-Wisdom_002dSaving-Plans}.

@item --angle-mode=@var{value}
@opindex --angle-mode
Must be one of @code{random}, @code{sequential}, or @code{file}. Specifying @code{random} will average over @code{norientations} grain orientations, with each angle chosen from a uniform distribution over the domain of orientation angles. Specifying @code{sequential} will make GGADT use a set of angles that are evenly spaced over each of the orientation angle domains. Specifying @code{file} allows you to give GGADT specific orientation angles to use in orientational averaging. The @code{file} mode requires that you also specify @code{--angle-file=/path/to/angle-file} which contains a list of orientation angles.

@item --angle-file=@var{value}
@opindex --angle-file
Path to a file containing a list of orientation angles which GGADT will use to compute orientational averages. Only used when @code{--angle-mode=file}.

@item --rotation-axis=@var{value}
@opindex --rotation-axis
Must be one of @code{none}, @code{xaxis}, @code{yaxis}, or @code{zaxis}. If not @code{none}, this will average over all orientations about the specified principle axis. Useful for grains that are aligned, for instance, with a magnetic field. @strong{Warning -- avoid using this option for now. A better implementation for spinning grains will be added later.}

@item --material-file=@var{value}
@opindex --material-file
Path to file defining the energy-dependent index of refraction and dielectric constant for the grain material you would like to use. The material files must be formatted in the way that GGADT expects, namely with a two-line header,

@example
17 =ICOMP: amorphous olivine-like astrosilicate
    E(eV)      Re(n)-1    Im(n)    Re(eps)-1  Im(eps)
@end example

followed by data for the material:

@example
1.000000E-05  2.435E+00 1.119E-03  1.080E+01 7.688E-03
1.240000E-05  2.435E+00 1.388E-03  1.080E+01 9.534E-03
1.771000E-05  2.435E+00 1.982E-03  1.080E+01 1.362E-02
2.000000E-05  2.435E+00 2.239E-03  1.080E+01 1.538E-02
@dots{}
@end example


@end table

@subsection Ellipsoidal grains

@table @option



@item --grain-axis-x=@var{value}
@opindex --grain-axis-x
For @code{ELLIPSOID} grains, we define the lengths of x, y and z axes.

@item --grain-axis-y=@var{value}
@opindex --grain-axis-y

@item --grain-axis-z=@var{value}
@opindex --grain-axis-z


@end table

@subsection Agglomerations of spherical particles (single or multiple composition)

@table @option

@item --agglom-file=@var{value}
@opindex --agglom-file
Path to a correctly formatted agglomeration file. Several agglomeration files are included with the distribution (see @file{data/agglomerations}), and if you wish to create your own, you must mimic exactly the format of these files.

@item --material-file1=@var{value}, --material-file2=@var{value}, @dots{}
@opindex --material-file1, --material-file2, @dots{}
Path(s) to the index file for material 1, 2, 3, etc.

@item --material-tag1=@var{value}, --material-tag2=@var{value}, @dots{}
@opindex --material-tag1, --material-tag2, @dots{}
The name(s) by which material 1, 2, 3, etc. are referred to in the agglomerate composition file.

@item --agglom-composition-file=@var{value}
@opindex --agglom-composition-file
Provides the path to a text file that lists the spherical agglomerates and a material 'tag' which is associated with an index file.

The agglomerate composition file is assumed to be formatted with one header line, followed by as many lines as there are agglomerates in the grain, with each line containing the index of an agglomerate and a material 'tag'.

@example
       j      material tag
       1    silicate
       2    silicate
       3    iron
       4    silicate
       @dots{}
@end example


@end table

@subsection Differential scattering cross section

@table @option

@item --nscatter=@var{value}
@opindex --nscatter
The (square root) of the number of grid elements (in theta) with which you would like to resolve the differential scattering cross section.

@item --dtheta=@var{value}
@opindex --dtheta
Alternate to @code{--nscatter}: this defines the spacing of the scattering angles (in arcseconds) that you would like to calculate the differential cross section.

@item --ephot=@var{value}
@opindex --ephot
Energy of the incident X-ray photon in keV.

@item --ior-re=@var{value},  --ior-im=@var{value}
@opindex --ior-re, --ior-im
The real and imaginary components of the complex index of refraction, minus one. If @code{--material-file} is specified, these parameters are overwritten by the linearly interpolated value of the index of refraction at E = @code{ephot}.

@item --max-angle=@var{value}
@opindex --max-angle
The maximum scattering angle for which you would like to calculate the differential scattering cross section.

@end table

@subsection Using your own customized grain geometry

GGADT supports three common ways to specify the geometry of a grain: either as a sphere, an ellipsoid, or an agglomeration of spheres. If you would like to explore other grain geometries that are not adequately described by these three options, you may program a grain geometry yourself (and then subsequently recompile GGADT).

To do this, you must know Fortran 90/95. Open the @code{custom.f90} file, and edit the @code{ior_custom()} function to return the index of refraction at an arbitrary position in the grain. After you have finished writing the function corresponding to the desired grain geometry, you'll need to recompile ggadt by moving to the parent directory and doing 

@example
make clean
make
@end example

Then, set the @code{grain-geometry} parameter to "custom" the next time you run @code{ggadt}. At the moment, the custom grain geometry is set up to be a spherical grain.




@subsection Energy-dependent scattering and absorption cross sections (@code{integrated} mode)

You must also define a @code{--material-file} to do this calculation.

@table @option

@item --integrated
@opindex --integrated
This flag tells GGADT that you would like to calculate the energy-dependent integrated absorption and scattering cross sections. 

@item --nephots=@var{value}
@opindex --nephots
Defines the number of photon energies to calculate the cross sections between @code{--ephot-min} and @code{--ephot-max}. You can also define the energy spacing directly, via the @code{--dephot} parameter.

@item --dephot=@var{value}
@opindex --dephot
Alternate to @code{--nephots}, defines the energy spacing between different photon energies for which the cross sections are calculated. 

@item --ephot-min=@var{value}
@opindex --ephot-min
Defines the minimum photon energy for which the cross sections are calculated

@item --ephot-max=@var{value}
@opindex --ephot-max
Defines the maximum photon energy for which the cross sections are calculated

@end table


@section Default parameter values

Default parameter values are loaded from the @code{.defaults} file located in the parent directory of GGADT. You can edit this file, or (as a safer option), edit a copy of this file and pass the path as the value for @code{--parameter-file}.


@section Axes conventions

GGADT allows the user to choose between two different axes conventions, specified by the @code{--axes-convention} option. The two choices are @code{ddscat} and @code{mstm}. 

@subsection Agglomerations

For grains that are agglomerations, the @strong{a} vectors are ortho-normal basis vectors and are eigenvectors of the moment of inertia tensor. @strong{a1} points in the direction with the greatest moment of inertia, @strong{a2} points in the direction with the second greatest moment of inertia, and @strong{a3} points in the direction with the smallest moment of inertia.


@subsection DDSCAT conventions
@image{ddscat_orientations,5in,5in}

The @code{ddscat} option uses the axes conventions defined by the DDSCAT@footnote{Draine and Flatau: @url{https://code.google.com/p/ddscat/}} code, which uses the discrete-dipole approximation to obtain the optical scattering and absorption properties of grains with arbitrary geometry. 


@subsection MSTM conventions
@image{mackowski_orientations,5in,5in}

The @code{mstm} option uses the axes conventions defined by the Multiple Sphere T-Matrix@footnote{Mackowski: @url{http://www.eng.auburn.edu/~dmckwski/scatcodes/}} code.

@section Future goals 
@itemize
@item Allow for the user to specify @strong{different types of mixed compositions} (layers, inclusions, solid spheroidal cores with no porosity, user-defined, etc.). Suggestions for improvement and utility are very welcome.
@item Allow a @strong{user-defined set of energies} over which to calculate the integrated cross sections.
@item Provide options for @strong{aligned spinning grains} (precession axis and rotation axis)
@item Extend the @code{--angle-mode} option to include @code{--angle-mode=sequential-custom} and @code{--angle-mode=random-custom} options, along with @code{--nbeta}, @code{--ntheta} and @code{--nphi} options so that the user can @strong{further customize the orientation averaging}
@item Provide an interface that allows the user to specify the grain geometry in a truly general way; both in the form of a @strong{table of values for m(x,y,z)} as well as in the form of a @strong{user-coded function for m(x,y,z)}.
@item A @code{--avg-scat-angle} option, which would then output the @strong{average scattering angle} as a function of energy for the given grain.
@item A possible future code that would substantially borrow from GGADT for doing calculations over full grain-size distribution and a user-defined spatial grain distribution in 3D. This will be useful for understanding, for instance, x-ray observations of sources that have been scattered/absorbed by intermediate grain distributions.
@end itemize

@c TODO: put in accuracy section!
@c @section Getting the accuracy you want
@c 
@c 
@c @subsection Differential scattering cross section calculations 
@c 
@c GGADT solves for either the differential scattering cross section as a function of scattering angle, or the total scattering and absorption cross sections as a function of photon energy, and must do so on a 2D numerical grid. The accuracy of the solution provided by GGADT depends on the resolution of these grids. The accuracy also depends on the number of orientations over which the calculation is averaged.
@c 
@c An exception this are spherical grains: an analytical solution (in the context of Anomalous Diffraction Theory) is implemented for spherical grains. 
@c 
@c The input parameters that determine accuracy are:
@c 
@c @itemize
@c @item @code{ngrain} -- The number of grid elements (along one dimension) for which the grain is defined.
@c @item @code{nscatter} (or equivalently @code{dtheta}) -- The number of grid points - along one dimension - over which the differential cross section is defined, or, if using @code{dtheta}, the width of the grid elements (in arcseconds).
@c @item @code{norientations} -- The number of grain orientations over which to average the calculation.
@c @end itemize
@c 
@c We've done some sample runs for a spherical grain (using a numerical grid solution and NOT the analytical solution),
@c 
@c @image{RMS_ngrain_nscatter,5in,5in}
@c 
@c @subsection Scattering and absorption cross-section calculations 
@c 
@c Accuracy results for TOTAL cross section calculations to come soon...

@node Example usage
<style>
img @{text-align:center;@}
</style>
@chapter Example usage

@cindex sample output
@cindex examples
@section Default case

If you simply want to test that @code{ggadt} is running properly, you can simply do

@example
src/ggadt
@end example

From the parent directory. This will solve a test case, which is defined by the default parameters set by the @code{.defaults} file:

@example
# Default parameters used by GGADT
# ================================
# Last modified by John Hoffman (June 26, 2014)

# Geometry of grain 
# | one of: 'sphere','spheres' (or 'agglomerate'), or 'ellipsoid'
grain-geometry                 = 'ellipsoid'	

verbose                        = F
use-efficiencies               = T
use-padded-fft                 = F
integrated                     = F
do-full-2d-fft                 = F
force-numerical                = F
axes-convention                = 'ddscat'

# effective radius (radius of sphere with same volume)
aeff                           = 0.2
# Number of grid elements (along one dimension) to resolve grain
ngrain                         = 128

# IF grain-geometery=ellipsoid (these are all ratios)
grain-axis-x                   = 1.0
grain-axis-y                   = 1.0
grain-axis-z                   = 1.0

# IF grain-geometry=agglomerate
agglom-file                    = ''
agglom-composition-file        = ''

# Grain composition
# Path to material index file
# material-file                  = "/Users/jah5/Desktop/Draine_temp/GGADT_JohnsMac/ggadt/data/materials/index_silD03"

# parameters for differential scattering cross section calculation
# units: keV
ephot                          = 2.0
#  Re(m-1)
#ior-re                         =-1.920E-4
#  Re(m)
#ior-im                         = 2.807E-5
# | 
# | DO NOT define ior-re or ior-im if you also have defined 
# | a material-file and 'ephot'. It will pull m(E) automatically.
# |

## number of angles to calculate diff. scat. cross section (ntheta) or spacing between them (dtheta)
# (arcseconds) Choose only one of these parameters 
dtheta                         = 25.0
#nscatter                      = 100

## Maximum angle for which the diff. scat. cross section is calculated
# (arcseconds)
max-angle                      = 1500.

# IF compiled with --enable-fftw3 
fftw-optimization              = 'estimate'

#grain_axis_ratio              = 1.0

rotation-axis                  = 'none'     # For ellipsoidal or agglomerate grains
angle-mode                     = 'random'   # Either 'sequential', 'random' or 'file' 
                                            # | tells GGADT how to choose orientations over which to average
                                            # | calculations.
angle-file                     = ''         # If angle-mode='file'; Path to file listing angles
                                            # | over which to average calculations      
norientations                  = 64
											# If angle-mode is NOT 'file'; number of orientations
                                            # | over which to average calcuations
# For integrated cross section (pass --integrated flag)
# number of photon energies to calculate integrated cross sections
#nephots                       = 100
# | OR define energy spacing
dephot                         = 0.1
# minimum photon energy 		
ephot-min                      = 0.1
# maximum photon energy
ephot-max                      = 5.0
@end example

If you would like to plot the output of this code, pipe the standard output of @code{ggadt} to a file of your choice. Then run the python plotting scripts:

@example

src/ggadt > output.dat
python scripts/plot.py output.dat

@end example

This will display two plots. One plot shows the full 2D cross-scattering efficiency. The other shows: (1) a phi-averaged plot of the differential cross-section efficiency (2) a slice of the full 2D grid at phi=0.0 and phi = pi/2 (3) the one-sigma RMS fluctuations over phi (in light green) and the max/min values over phi (in light grey).

@section Using @code{make_sample_plots.py}
We have made a small python script (@code{scripts/make_sample_plots.py}) that runs example cases for different grain geometries. You will need the matplotlib, numpy and scipy libraries in order to run this script. More information about these libaries is available at @url{http://scipy.org/getting-started.html}.

The python script runs GGADT for a grain with an effective radius of 0.2 microns, composed of MgFeSiO_4 silicate, with an incident photon energy of 2.0 keV, and with @code{ngrain} of 256 and a @code{nscatter} of 100. 

The inset within the plot, on the upper left corner, shows the full 2d grid of the scattering cross section efficiency.
@html
<img src="sample-sphere.png" height=400><br/>
<img src="sample-ellipsoid.png" height=400><br/>
<img src="sample-spheres.png" height=400><br/>
@end html

@section Ellipsoids and spheroids -- orientational averages about a principal axis

@strong{WARNING -- this section is obselete, and the rotation-axis parameter should be avoided. Spinning grains will be handled in future versions of GGADT.}

GGADT allows you to specify a general, ellipsoidal (tri-axial) grain through the input options @code{--grain-axis-x,y,z=}@emph{val}. These specify the relative lengths of the three principal axes of the grain. These axes lengths are then normalized so that the effective radius of the grain is consistent with the @code{--aeff} parameter.

If you wish to calculate orientationally-averaged quantities of a grain @emph{about a principal axis}, GGADT allows you to do this through specifying @code{--rotation-axis=xaxis,yaxis,zaxis,none}. The @code{--rotation-axis} parameter is 'none' by default.


The @code{--rotation-axis} parameter will work for grain agglomerates as well. The positions of the agglomerates as specified in the agglomerate file define the coordinate system that GGADT works in. Be sure the axis you specify via @code{--rotation-axis} is really the axis you want. You'll have to know something about how the coordinate system of the agglomerate file is defined.

If you are using an @code{ELLIPSOID} grain geometry, the coordinate system is such that the z-axis points towards the observer (i.e. the incident photons' direction of propagation), and the x and y directions are defined by the @code{--grain-axis-x,y,z} input parameters. 

Currently, there is no option to specify a custom rotation axis about which to orient the grain. If this is something you would like added to GGADT, let John Hoffman know.

@subsection Example runs for a prolate spheroid

Below are the results from running GGADT on a prolate spheroid (with axes ratios 2:1:1), with the grain's x-axis being the longest.

@strong{Orientation-averaged differential scattering efficiency about the x-axis}
@example
src/ggadt --grain-axis-y=0.5 --grain-axis-z=0.5 --grain-geometry=ellipsoid --rotation-axis=xaxis > outputx.dat
python scripts/plot.py outputx.dat
@end example
@html
<img src="spheroid_rot_xaxis.png" height=400>
@end html
@strong{Orientation-averaged differential scattering efficiency about the y-axis}
@example
src/ggadt --grain-axis-y=0.5 --grain-axis-z=0.5 --grain-geometry=ellipsoid --rotation-axis=yaxis > outputy.dat
python scripts/plot.py outputy.dat
@end example
@html
<img src="spheroid_rot_yaxis.png" height=400>
@end html

@strong{Orientation-averaged differential scattering efficiency about the z-axis}
@example
src/ggadt --grain-axis-y=0.5 --grain-axis-z=0.5 --grain-geometry=ellipsoid --rotation-axis=zaxis > outputz.dat
python scripts/plot.py outputz.dat
@end example
@html
<img src="spheroid_rot_zaxis.png" height=400>
@end html

@node Testing against previous results
@html
<style>
img @{text-align:center;@}
</style>
@end html
@chapter Testing against previous results

@section Spherical case (ADT/Mie theory)
@subsection GGADT
@html
<img src = "DA06_f1_spheres.png" height=400>
</br
@end html
@subsection Actual (Figure 1) from Draine & Allaf-Akbari 2006

@html
<img src = "da06_spheres_actual.png" height=400>
</br>
@end html


@section Ellipsoidal case (Draine and Allaf-Akbari 2006)

@subsection GGADT
@html
<img src = "DA06_f2_ellipsoids.png" height=400>
</br>
@end html
@subsection Actual (Figure 2) from Draine & Allaf-Akbari 2006

@html
<img src = "da06_ellipsoids_actual.png" height=400>
</br>
@end html



@section Agglomeration of spheres (Heng & Draine 2009)
@html
<img src = "da06_ellipsoids_actual.png" height=400>
<img src = "HD09_f3.png" height=400>
</br>
@end html

@node FFT comparison
@html
<script type="text/javascript"
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
@end html
@chapter FFT comparison

Currently, GGADT allows you to choose between two FFT algorithms: FFTW 3 (@url{http://fftw.org/}), which requires you install the FFTW3 library, and GPFA (Generalized Prime Factor Algorithm)@footnote{Temperton, C. (1992). A Generalized Prime Factor FFT Algorithm for any \(N=2^p3^q5^r\). SIAM Journal on Scientific and Statistical Computing, 13(3), 676-686.}, which is self-contained and included with the GGADT package. GPFA is used by default, and, as shown below, is slightly faster than FFTW in the current version of GGADT. 

If you wish to use the FFTW3 version of GGADT, you will need to install FFTW 3.3.x (we have only tested 3.3.3, but GGADT should in principal be compatible with all 3.x.x versions). GGADT will not work with FFTW 2.x, as the two interfaces are different.

@section Efficient calculation of \(d\sigma/d\Omega(\theta)\)

Though \(S(\theta,\phi)\) is in principle determined by a 2d FFT of the shadow function, if you only care about the orientational average of \(d\sigma/d\Omega(\theta,\phi)\), you can assume axisymmetry and take \(\phi=0\). When you do this, you can integrate along one axis of the shadow function to obtain an effective shadow function, 

\[ g(x) \equiv \int_@{-\infty@}^@{\infty@}f(x,y)dy \]

The calculation of \(d\sigma/d\Omega(\theta)\) then requires that one-dimensional DFT's be taken of \(g(x)\) instead of two-dimensional DFT's of \(f(x,y)\).

In addition, to avoid padding, we can do several (smaller) FFT's of \(g^\delta_n\), where \(g^\delta_n = \sum e^@{-2\pi i\delta(n/N)@}g_n\); and take only the first K values that we care about (small \(k\) values correspond to small scattering angles). These two tricks speed things up tremendously (2-3 orders of magnitude). In general, the computational time of the old padded, 2d FFT method and GGADT is:

\[
t_@{\rm naive@}\propto \left(\frac@{N@}@{x@}\frac@{\pi@}@{\delta\theta@}\right)^2\log\left(\frac@{N@}@{x@}\frac@{\pi@}@{\delta\theta@}\right).
\]

Utilizing mutliple FFT's (\(N_@{\rm FFT@} = (\theta_@{\rm max@}/\delta\theta) / K\)) of length \(K = N k\Delta x(\theta_@{\rm max@}/2\pi) = x(\theta_@{\rm max@}/\pi)\), requires a computational time that scales as

\[
t_@{\rm GGADT@} \propto \left(\frac@{1@}@{x@}\frac@{\pi@}@{\delta\theta@}\right)\log\left[x\left(\frac@{\theta_@{\rm max@}@}@{2\pi@}\right)\right] + \beta N^2.
\]


More information about this can be found in Hoffman and Draine (2015) (in prep).

@html
<img src="timing_actual_time.png" height=400>
<img src="timing_relative_to_gpfa.png" height=400>
@end html


@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi


@node Concept index
@unnumbered Concept index

@printindex cp

@bye
