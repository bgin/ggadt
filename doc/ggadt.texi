\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ggadt.info
@include version.texi
@settitle GGADT @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header

@copying
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying
@c If your manual is published on paper by the FSF, it should include
@c the standard FSF Front-Cover and Back-Cover Texts, as given in
@c maintain.texi.

@dircategory Basics
@direntry
* GGADT: (ggadt).        
@end direntry

@titlepage
@title GGADT
@subtitle for version @value{VERSION}, @value{UPDATED}
@author John Hoffman (@email{jah5@@princeton.edu}), Michael Tarczon (@email{mtarczon@@princeton.edu})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex

@node Top
@top GGADT
This manual is for GGADT (version @value{VERSION}, @value{UPDATED}),
which calculates scattering properties of dust grains in the interstellar
medium by using anomalous diffraction theory (ADT). 
@end ifnottex

@menu
* Overview::		General purpose and information.
* Installation::	How to install @command{ggadt} on your system.
* Invoking GGADT::	Giving @command{ggadt} your input.	
* Example usage::	Quick examples to get you started.
* Testing against previous results::  Comparing GGADT to literature
* FFT comparison::		Comparison between GPFA and FFTW3 timing.
* GNU Free Documentation License:: Copying and sharing this documentation.
* Concept index::	Index of concepts.
@end menu


@node Overview
@chapter Overview

@cindex greetings
@cindex overview

The @command{ggadt} program calculates the x-ray scattering properties of dust
in the interstellar medium. You define the geometry and composition
of a dust grain, the energy of the incident x-ray photons, and a few other parameters. 
The @command{ggadt} program then calculates the orientationally-averaged scattering 
cross-section in the plane perpendicular to the incident photons. 

@cindex authors
@cindex Hoffman, John
@cindex Tarczon, Michael
GGADT was written by John Hoffman and Michael Tarczon.


@section Language
@cindex Fortran 2003

GGADT is written in Fortran, using the Fortran 2003 standard. In the future, 
GGADT may be changed to comply with earlier Fortran standards (90 or 95) for
compatibility reasons.

Fortran 2003 provides an easy way to interface Fortran programs with C 
libraries. In this case, Fortran 2003 made the FFTW3 library (@url{http://www.fftw.org/})
easy to implement for performing fast Fourier transforms. FFTW3 is a well-tested, optimized, 
and popular suite for performing FFT's.


@section Background
@cindex background
@cindex interstellar medium
@cindex astrophysics

@subsection Dust in the interstellar medium (ISM)

The interstellar medium (ISM) refers to everything that occupies the space between stars in a galaxy. The ISM of the Milky Way contains rich physics and is an active area of astrophysical research. Dust, molecules, gas, radiation, cosmic rays -- all of these are important constituents of the ISM, and all of these constituents play roles of varying dyanmical importance, depending on the local ISM environment in question.@footnote{Draine, Bruce T., Physics of the Interstellar and Intergalactic Medium, 2011, Princeton University Press, NJ.}.

One area of active research in ISM physics is determining the size distribution and composition of interstellar dust. One way to probe the size distributions and dust composition is by measuring how ISM dust interacts with x-ray radiation.@footnote{Overbeck, J.W. 1965, ApJ, 141, 864}@footnote{Hayakawa, S. 1970, Prog. Theor. Phys., 43, 1224}@footnote{Martin, P.G. 1970, MNRAS, 149, 221} When looking at an x-ray source through interstellar dust, the scattering properties of the intermediate dust create an x-ray ``halo'' around the source.@footnote{Draine, B.T. 2003, ApJ, 598, 1026}.

GGADT is designed to be a tool to test dust models against observations of x-ray halos. Since the size of a typical dust grain (0.1 micrometers) is large compared to typical x-ray wavelengths (1 nanometer), an approximation known as Anomalous Diffraction Theory (ADT)@footnote{van de Hulst H., Light scattering by small particles, 1957, J.Wiley & Sons, NY.} can be used to calculate the absorption and scattering properties of dust grains@footnote{Draine, B.T. and Allaf-Akbari, K. 2006, ApJ, 652, 1318}.

@subsection Anomalous Diffraction Theory (ADT)

The mathematics of what GGADT does is best explained in Draine and Allaf-Akbari 2006; we include a portion of that paper below.
@quotation

At X-ray energies materials have refractive indices very close to unity (|m - 1| << 1), and the dust grains responsible for most of the scattering are usually much larger than the wavelength of the incoming radiation (ka >> 1 [k is the wavenumber of the incident radiation, a is the effective radius of the grain]). In this regime, the scattering and absorption of X-rays can be calculated using an approximation first developed by van de Hulst (1957) and known as anomalous diffraction theory (ADT). ADT is a combination of ray-tracing optics (applicable because k*a >> 1) and Huygens' principle of propagation of a scalar field, applied to cases in which the electromagnetic wave can enter and propagate through the grain with essentially no reflection or refraction (|m - 1| << 1).

Consider an incident plane wave @math{U_{inc} = U_0\exp(ikz)}, propagating in the z-direction. Under the conditions above, the plane wave, once reaching a plane V located just beyond the grain and normal to the direction of the propagation of the incident wave, will have changed by a fractional amount that we refer to as the @emph{shadow function}, @math{f(x,y)}: 

@math{f(x,y) = 1-\phi(x,y)}

where the complex phase function phi is 

@math{\phi(x,y) = k\int_{-\infty}^{\infty}[1-m(x,y,z)]dz}

where @math{m(x,y,z)} is the refractive index at the point @math{(x,y,z)}.

Once the shadow function is known, Huygens' principle allows the amplitude of the scattered part of the wave, in the radiation zone, to be calculated as a Fourier transform of the shadow function over the plane V: 


@math{U_{sca}(r\vec{n}) = U_0\frac{\exp{(ikr)}}{kr}S(\vec{n})}@*
@math{S(\vec{n}) = S(k_x, k_y) = \frac{k^2}{2\pi}\int \exp{[i(k_xx+k_yy)]}f(x,y)dxdy}@*
@math{k_x = k(\vec{n}\cdot\vec{x})}@*
@math{k_y = k(\vec{n}\cdot\vec{y})}@*
The scattering properties of the grain can be obtained from @math{S(\vec{n})}, with the differential scattering cross section given by 

@math{\frac{d\sigma_{sca}}{d\Omega}(\vec{n}) = \frac{|S(\vec{n})|^2}{k^2}}

 @author Draine and Allaf-Akbari 2006
@end quotation

@section Basic GGADT logic outline

Thus, GGADT does the following:

@enumerate

@item Reads in dust and x-ray parameters
@item For each of the @option{nangle} orientations,
@enumerate
@item Project grain onto 2D grid
@item Take the centered FFT of this grid using FFTW
@item Normalize this result so that it represents @math{dQ_{scat}/d\Omega}, i.e., the differential scattering cross section divided by @math{\pi a^2}.
@item Add contribution of differential cross-section to orientational average
@end enumerate

@item Output orientationally averaged grid.

@end enumerate


@node Installation
@chapter Installation

@cindex installing
@cindex configure
@cindex enable-openmp
@cindex enable-mpi
@cindex gcc 

@section System requirements
GGADT should install easily on most @emph{Unix-based systems} (e.g. Linux, Mac) by following the standard GNU install procedures, described in @file{INSTALL}.

@example
./configure [--enable-openmp] [--enable-fftw3] @dots{}
make
make install
@end example

@section Package dependencies


@itemize @bullet

@item @strong{Suitable C and Fortran compilers}: GGADT was developed using the GNU compiler suite (version 4.5.4 and higher) throughout, but the @code{configure} script will try to work with most common compilers. Your Fortran compiler must be able to compile Fortran 2003 code.

@item @strong{FFTW 3}. Available at @url{http://www.fftw.org/}.
@itemize @minus

@item @emph{Location of the FFTW3 headers}: In order for GGADT to find the Fortran headers for FFTW3, they must be in the standard location (@code{/usr/local/include} or @code{usr/include}) or in @code{$prefix/include} where @code{$prefix} is defined by doing @code{./configure --prefix=<prefix>} at the configuration step for @code{ggadt}. If you have FFTW3 installed with MacPorts, the configure script should be able to find it for you, and you don't have to specify anything extra.

@end itemize



@itemize @minus

@item @strong{OpenMP}: For the OpenMP version of GGADT, you must have C and Fortran compilers that are compatible with OpenMP version 4.0. 

@end itemize

@item @strong{Mac users}
@itemize @minus

@item Install the latest edition of @strong{XCode command-line tools}. As of Mac OSX v10.9.1, the command-line tools are not included in XCode automatically, so you have to do this on your own.
@item @strong{Macports} is highly recommended. It provides a convenient, safe package manager for Mac (unofficial, of course). To set up an environment condusive to compiling and running @code{ggadt}, do the following from the terminal:
@enumerate
@item Download and install macports from @url{http://www.macports.org/}.
@item Install gcc (4.5.4 or higher is recommended), and the FFTW3 library:
@example
sudo port install gcc45
sudo port install fftw-3
@end example
@item Set the gcc compiler: @code{sudo port select --set gcc mp-gcc45}
@end enumerate
@end itemize
@item (@emph{Optional}) @strong{Python 2.7} or later for some of the included scripts.
@item (@emph{Optional} @strong{matplotlib},@strong{numpy}, @strong{scipy} python librarys if you wish to use the included plotting scripts. More information can be found at @url{http://scipy.org/getting-started.html}.
@end itemize



@node Invoking GGADT
@chapter Invoking GGADT

@cindex invoking
@cindex options
@cindex usage
@cindex help

To see usage and all available options for @code{ggadt}, simply use the @option{h} option:

@example
ggadt -h
@end example

@section Setting parameter values

The format for running the @command{ggadt} program is:

@example
ggadt @var{option} @dots{}
@end example

With no options, @command{ggadt} runs calculations on a set of default grain parameters. Parameters may be specified as command-line arguments, 

@example
ggadt --parameter=value @dots{}
@end example

or in a parameter file that is specified as a command-line argument,

@example
ggadt --parameter-file-name=/path/to/parameterfile
@end example

or a combination of the two:

@example
ggadt --parameter-file-name=/path/to/parametefile --parameter=value @dots{}
@end example

If a parameter is set by a command-line argument @emph{and} by a parameter file, the command-line argument is used. 

@section Parameter file syntax

The syntax of parameter files is:

@example
#comment
parameter=value
another-parameter=another-value
@dots{}
@end example

@strong{Note --} The @code{cluster-file-name} and @code{euler-file-name} options must be specified with quotes surrounding their values. In order to make the parameter file portable, you should specify an absolute file path, not a relative one.

E.g.:

@example
cluster-file-name='/absolute/path/to/parameter-file.ini'
@end example 

NOT

@example
cluster-file-name=/absolute/path/to/parameter-file.ini
@end example 

or

@example
cluster-file-name='../../parameter-file.ini'
@end example 

Specifying a relative file-path (as in the last example) will work, as long as you always invoke GGADT from the location where the relative file-path is valid. For example, if I am in the parent directory, and my parameter file is in the @code{data/parameter-files} directory, 

@example
cluster-file-name='data/parameter-files/parameter-file.ini'
@end example 

will work, as long as I @strong{always} run @code{ggadt} from the parent directory.

@section Options and parameters


@command{ggadt} supports the following options:

@cindex environment variables, help for

@table @option
@item --help
@itemx -h
@opindex --help
@opindex -h
The `help' screen--prints usage information and available options.

@item --version
@itemx -v
@opindex --version
@opindex -v
Print the version number of GGADT on
standard output and then exit successfully.

@item --parameter-file-name=@var{value}
@opindex --parameter-file-name
Path to a correctly formatted parameter file.

@item --grain-geometry=@var{value}
@opindex --grain-geometry
Geometry of dust grain. Must be one of @code{SPHERE}, @code{ELLIPSOID}, @code{SPHERES}. A @code{SPHERES} grain geometry means that your grain is a conglomerate of smaller spheres. If you wish to use this grain geometry, you should supply a file (hereafter called a ``@emph{cluster file}", see the next option) that defines the relative positions of the spheres that make up the grain. The sizes of these spheres will be normalized so that the effective radius of the grain is consistent with @option{aeff}.  

@item --cluster-file-name=@var{value}
@opindex --cluster-file-name
Path to a correctly formatted cluster file. Several cluster files are included with the distribution (see @file{data/clusters}), and if you wish to create your own, you must mimic exactly the format of these files.

@item --aeff=@var{value}
@opindex --aeff
Effective radius of dust grain. The effective radius is defined to be the radius of a sphere with the same volume as the dust grain.

@item --grain-axis-x=@var{value}
@opindex --grain-axis-x
For @code{ELLIPSOID} grains, we define the lengths of x, y and z axes.

@item --grain-axis-y=@var{value}
@opindex --grain-axis-y

@item --grain-axis-z=@var{value}
@opindex --grain-axis-z

@item --ephot=@var{value}
@opindex --ephot
Energy of the incident X-ray photons in keV.

@item --ior-re=@var{value}
@opindex --ior-re
The real component of the complex index of refraction, minus one.

@item --ior-im=@var{value}
@opindex --ior-im
The imaginary component of the complex index of refraction.


@item --ngrain=@var{value}
@opindex --ngrain
The (square root) of the number of grid elements with which you would like to resolve your grain. To get accurate results out to about 4000 arcseconds, we've found that a value of 64 is good enough.

@item --nscatter=@var{value}
@opindex --nscatter
The (square root) of the number of grid elements with which you would like to resolve the scattering cross section.

@item --norientations=@var{value}
@opindex --norientations
The number of grain orientations relative to the incoming X-ray photon over which to average the differential cross-section.

@item --fftw-optimization=@var{value}
@opindex --fftw-optimization
Must be one of @code{ESTIMATE}, @code{MEASURE}, @code{PATIENT} or @code{EXHAUSTIVE}. FFTW wisdom is saved in @code{$HOME/.ggadt/plans}. For more information about what these tags mean and about FFTW wisdom, see @url{http://fftw.org/fftw3_doc/Words-of-Wisdom_002dSaving-Plans.html#Words-of-Wisdom_002dSaving-Plans}.

@item --use-padded-fft
@itemx -s
@opindex --use-padded-fft
@opindex -s 
This will force GGADT to do only one FFT. In order to provide you with the desired angular resolution of the differential cross section (set by @code{nscatter}), GGADT will pad the 2-d grid on which the shadow function is defined. Forcing GGADT to use a padded FFT, instead of the more efficient method without padding, will run much slower.

@end table



@section Getting the accuracy you want

GGADT solves for the differential scattering cross section as a function of scattering angle, and must do so on a numerical grid. The accuracy of the solution provided by GGADT depends on the resolution of these grids. In the case where the grain is non-spherical, the accuracy also depends on the number of orientations over which the calculation is averaged.

The input parameters that determine accuracy are:

@itemize
@item @code{ngrain} -- The number of grid elements (along one dimension) for which the grain is defined.
@item @code{nscatter} (or equivalently @code{dtheta}) -- The number of grid points - along one dimension - over which the differential cross section is defined, or, if using @code{dtheta}, the width of the grid elements (in arcseconds).
@item @code{norientations} -- The number of grain orientations over which to average the calculation.
@end itemize

We've done some sample runs for a spherical grain,

@image{RMS_ngrain_nscatter,5in,5in}



@node Example usage
@chapter Example usage

@cindex sample output
@cindex examples
@section Default case

If you simply want to test that @code{ggadt} is running properly, you can simply do

@example
src/ggadt
@end example

From the parent directory. This will solve a test case, which is defined by the following hard-coded default parameters:

@example
aeff           = 0.2
ephot          = 2.0
grain-axis-x   = 1.0
grain-axis-y   = 1.0
grain-axis-z   = 1.0
ior-re         = -1.920E-4
ior-im         = 2.807E-5
grain-geometry = 'sphere'
euler-angle-mode = 'random'
euler-angle-file = ''
ngrain         = 256
nscatter       = 100
norientations  = 100
dtheta         = 10.0
max-angle      = 3000.
cluster-file-name = ''
fftw-optimization = 'estimate'
@end example

If you would like to plot the output of this code, pipe the standard output of @code{ggadt} to a file of your choice. Then run the python plotting scripts:

@example

src/ggadt > output.dat
python scripts/plot.py output.dat

@end example

This will display two plots. One plot shows the full 2D cross-scattering efficiency. The other shows: (1) a phi-averaged plot of the differential cross-section efficiency (2) a slice of the full 2D grid at phi=0.0 and phi = pi/2 (3) the one-sigma RMS fluctuations over phi (in light green) and the max/min values over phi (in light grey).

@section Using @code{make_sample_plots.py}
We have made a small python script (@code{scripts/make_sample_plots.py}) that runs example cases for different grain geometries. You will need the matplotlib, numpy and scipy libraries in order to run this script. More information about these libaries is available at @url{http://scipy.org/getting-started.html}.

The python script runs GGADT for a grain with an effective radius of 0.2 microns, composed of MgFeSiO_4 silicate, with an incident photon energy of 2.0 keV, and with @code{ngrain} of 256 and a @code{nscatter} of 100. 

The inset within the plot, on the upper left corner, shows the full 2d grid of the scattering cross section efficiency.

@image{sample-sphere,5in,5in}

@image{sample-ellipsoid,5in,5in}

@image{sample-spheres,5in,5in}


@node Testing against previous results
@chapter Testing against previous results

@section Spherical case (ADT/Mie theory)
@subsection GGADT
@image{DA06_f1_spheres,4in,4in}
@subsection Actual (Figure 1) from Draine & Allaf-Akbari 2006
@image{da06_spheres_actual,3in,3in}

@section Ellipsoidal case (Draine and Allaf-Akbari 2006)

@subsection GGADT
@image{DA06_f2_ellipsoids,3in,3in}

@subsection Actual (Figure 2) from Draine & Allaf-Akbari 2006
@image{da06_ellipsoids_actual,4in,4in}

@section Agglomeration of spheres (Heng & Draine 2009)

@image{HD09_f3,5in,5in}
@node FFT comparison
@chapter FFT comparison
Currently, GGADT allows you to choose between two FFT algorithms: FFTW 3 (@url{http://fftw.org/}), which requires you install the FFTW3 library, and GPFA (Generalized Prime Factor Algorithm)@footnote{Temperton, C. (1992). A Generalized Prime Factor FFT Algorithm for any N=2^p3^q5^r. SIAM Journal on Scientific and Statistical Computing, 13(3), 676-686.}, which is self-contained and included with the GGADT package. GPFA is used by default, and, as shown below, is slightly faster than FFTW in the current version of GGADT. This will change in later versions, since at the moment, we do not take advantage of saving and loading FFTW "wisdom". 

Earlier versions of GGADT, which did FFT's in a different way (only did padded FFT's, but utilized FFTW wisdom), had FFTW being about 20 percent faster than GPFA.

If you wish to use the FFTW3 version of GGADT, you will need to install FFTW 3.3.x (we have only tested 3.3.3, but GGADT should in principal be compatible with all 3.x.x versions). GPFA will not currently work with FFTW 2.x, as the two interfaces are different, but plans to include FFTW 2.x support are in the works. 

If you have a particular FFT library that you would like to see implemented, please send an e-mail to jah5 (at) princeton.edu. It will likely be faster if you simply write your own module to attach to GGADT. This module must provide the function @code{fft_firstk(arr,K)} where @code{arr} is an N by N array, and @code{K} is an integer less than N. The function must return a @code{K} by @code{K} array, containing the first @code{K} values of the FFT of @code{arr}. The complexity of this algorithm should scale as (N*N)log(@code{K}*@code{K}), instead of the (N*N)log(N*N) complexity of the standard two-dimensional FFT.

For information about how to construct this algorithm, see the instructions for FFTW at @url{http://www.fftw.org/pruned.html}.

If you are successful at porting your FFT algorithm, let us know, and we will do our best to test it and include it with future releases.

@section Timing
@image{timing_actual_time,5in,5in}
@image{timing_relative_to_gpfa,5in,5in}

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi


@node Concept index
@unnumbered Concept index

@printindex cp

@bye
