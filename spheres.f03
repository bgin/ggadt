! 11/11/2013--JOHN HOFFMAN
!=========================
! THIS WILL BE:
! (1) A TEST OF THE PROGRAMMING, SINCE WE CAN DIRECTLY COMPARE TO MIE THEORY
! (2) A FUTURE MODULE THAT WILL BE USED FOR COLLECTIONS OF SPHERES.

PROGRAM SPHERES
	USE, INTRINSIC :: ISO_C_BINDING
	REAL :: XMIN, XMAX, YMIN, YMAX, ZMIN, ZMAX, DX, DY, DZ, K, EPHOT, ADUST, PI, BOX_WIDTH
	INTEGER :: NGRID
	PARAMETER (NGRID=512)

	REAL, DIMENSION(NGRID) :: X, Y, Z, KX, KY, THETAX, THETAY, SCATTERX, SCATTERY
	DOUBLE COMPLEX, DIMENSION(NGRID,NGRID) :: SH, FTSH
	INTEGER :: I, J

	ADUST = 0.20 ! MICROMETERS
	EPHOT = 0.5  ! KEV

	PI = 3.14159
	K = (2*PI/1.239842)*1000*EPHOT

	BOX_WIDTH = 32.0

	XMIN = -BOX_WIDTH*ADUST/2.0
	YMIN = -BOX_WIDTH*ADUST/2.0
	ZMIN = -1*ADUST
	XMAX = BOX_WIDTH*ADUST/2.0
	YMAX = BOX_WIDTH*ADUST/2.0
	ZMAX = 1*ADUST
	! SET X, Y, AND Z ARRAYS
	DX = (XMAX-XMIN)/(SIZE(X)-1)
	DY = (YMAX-YMIN)/(SIZE(Y)-1)
	DZ = (ZMAX-ZMIN)/(SIZE(Z)-1)

	DO I=1,SIZE(X)
		X(I) = XMIN + (I-1)*DX
	END DO
	DO I=1,SIZE(Y)
		Y(I) = YMIN + (I-1)*DY
	END DO
	DO I=1,SIZE(Z)
		Z(I) = ZMIN + (I-1)*DZ
	END DO
	

	! SET SHADOW FUNCTION
	DO I=1,SIZE(X)
		DO J=1,SIZE(Y)
			SH(I,J) = SHADOW(X(I),Y(J),ZMAX)
		END DO
	END DO

	FTSH = FFT(SH,X,Y)

	KX = GET_K(X)
	KY = GET_K(Y)

	DO I=1,SIZE(X)
		DO J=1,SIZE(Y)
			FTSH(I,J) = FTSH(I,J)*(K**2)/(2*PI)*DX*DY
		END DO
	END DO

	DO I=1,SIZE(KX)
		THETAX(I) = ASIN(KX(I)/K)
		THETAY(I) = ASIN(KY(I)/K)
	END DO

	PRINT *,"#THETA (RADIANS)   [DSCAT/DOMEGA (X-AXIS)] [DSCAT/DOMEGA (Y-AXIS)]"
	DO I=1,SIZE(X)
		SCATTERX(I) = (ABS(FTSH(I,1))**2)/(K**2)
		SCATTERY(I) = (ABS(FTSH(1,I))**2)/(K**2)
		PRINT *,THETAX(I),' ',SCATTERX(I)/(PI*ADUST**2),' ',SCATTERY(I)/(PI*ADUST**2)
	END DO
CONTAINS

FUNCTION INDEX_OF_REFRACTION(X,Y,Z)
IMPLICIT NONE
 	COMPLEX(C_DOUBLE_COMPLEX) :: M, INDEX_OF_REFRACTION
 	REAL :: R,R_SPH,L, MREAL, MIMAG
 	REAL, INTENT(IN) :: X,Y,Z

 	MREAL = -7.152E-4
 	MIMAG = 1.887E-4

 	M = CMPLX(MREAL, MIMAG)

 	R_SPH = ADUST
 	R = SQRT(X**2 + Y**2)
 	INDEX_OF_REFRACTION = (0,0)
 	IF (R < R_SPH) THEN
 		L = SQRT(R_SPH**2 - R**2)
 		IF ( ABS(Z)-L < 0 ) THEN
 			INDEX_OF_REFRACTION = M
 		END IF 
 	END IF
END FUNCTION INDEX_OF_REFRACTION

FUNCTION PHI(X,Y,Z)
	IMPLICIT NONE
	INTEGER :: I
	REAL, INTENT(IN) :: X,Y,Z
	REAL :: ZT
	COMPLEX(C_DOUBLE_COMPLEX) :: PHI
	PHI = (0,0)
	DO I=0,NGRID
		ZT = ZMIN + I*DZ
		PHI = PHI + DZ*INDEX_OF_REFRACTION(X,Y,ZT)
	END DO 
	PHI = K*PHI
END FUNCTION PHI

FUNCTION SHADOW(X,Y,Z)
	IMPLICIT NONE
	REAL, INTENT(IN) :: X,Y,Z
	COMPLEX(C_DOUBLE_COMPLEX) :: SHADOW 
	SHADOW = 1-EXP( (0.0,1.0)*PHI(X,Y,Z) )
END FUNCTION SHADOW

FUNCTION GET_K(X)
	IMPLICIT NONE
	REAL, INTENT(IN) :: X(:)
	INTEGER :: N, I, J 
	REAL :: L
	REAL, DIMENSION(SIZE(X)) :: GET_K
	N = SIZE(X)
    L = X(N) - X(1)
    DO I=1,N
    	GET_K(I) = (2*PI*(I-1))/L
    END DO
END FUNCTION GET_K

FUNCTION FFT(F,X,Y)
	USE, INTRINSIC :: ISO_C_BINDING
       INCLUDE 'FFTW3.F03'
    REAL, INTENT(IN) :: X(:), Y(:)
    COMPLEX(C_DOUBLE_COMPLEX), INTENT(INOUT) :: F(:,:)
    TYPE(C_PTR) :: PLAN
    COMPLEX(C_DOUBLE_COMPLEX), DIMENSION(SIZE(X),SIZE(Y)) :: FFT
    INTEGER :: NX, NY, I, J

    NX = SIZE(X)
    NY = SIZE(Y)
    PLAN = FFTW_PLAN_DFT_2D(NY, NX, F ,FFT, FFTW_BACKWARD,FFTW_ESTIMATE)
    CALL FFTW_EXECUTE_DFT(PLAN, F, FFT)
    CALL FFTW_DESTROY_PLAN(PLAN)
END FUNCTION FFT
END PROGRAM SPHERES

