! 11/11/2013--JOHN HOFFMAN
!=========================
! THIS WILL BE:
! (1) A TEST OF THE PROGRAMMING, SINCE WE CAN DIRECTLY COMPARE TO MIE THEORY
! (2) A FUTURE MODULE THAT WILL BE USED FOR COLLECTIONS OF SPHERES.

PROGRAM GGADT
	USE, INTRINSIC :: ISO_C_BINDING
	USE SPHERE
	USE PARAMS
	USE FFTW
	IMPLICIT NONE

	REAL :: XMIN, XMAX, YMIN, YMAX, ZMIN, ZMAX, DX, DY, DZ, K
	REAL, DIMENSION(NGRID) :: X, Y, Z, KX, KY, THETAX, THETAY, SCATTERX, SCATTERY
	DOUBLE COMPLEX, DIMENSION(NGRID,NGRID) :: SH, FTSH
	INTEGER :: I, J
	CHARACTER(len=32) :: arg
	!I = 0
	!DO
	!	CALL GET_COMMAND_ARGUMENT(I, ARG)
	!	IF (LEN_TRIM(ARG) == 0) EXIT
	!	WRITE (*,*) TRIM(ARG)
	!	I = I+1
	!END DO

	K = (2*PI/1.239842)*1000*EPHOT

	XMIN = -BOX_WIDTH*A_EFF/2.0
	YMIN = -BOX_WIDTH*A_EFF/2.0
	ZMIN = -2*A_EFF
	XMAX = BOX_WIDTH*A_EFF/2.0
	YMAX = BOX_WIDTH*A_EFF/2.0
	ZMAX = 2*A_EFF
	! SET X, Y, AND Z ARRAYS
	DX = (XMAX-XMIN)/(SIZE(X)-1)
	DY = (YMAX-YMIN)/(SIZE(Y)-1)
	DZ = (ZMAX-ZMIN)/(SIZE(Z)-1)

	DO I=1,SIZE(X)
		X(I) = XMIN + (I-1)*DX
	END DO
	DO I=1,SIZE(Y)
		Y(I) = YMIN + (I-1)*DY
	END DO
	DO I=1,SIZE(Z)
		Z(I) = ZMIN + (I-1)*DZ
	END DO
	

	! SET SHADOW FUNCTION
	IF (GEOMETRY .EQ. "SPHERE") THEN 
		DO I=1,SIZE(X)
			DO J=1,SIZE(Y)
				SH(I,J) = SHADOW_SPHERE(X(I),Y(J),ZMAX, K ) 
		!		PRINT *,X(I),' ',Y(J),' ',ABS(SH(I,J))
			END DO
		END DO
	   ! CALL EXIT()

	!ELSE IF (GEOMETRY == "SPHEROID") THEN 
	!	DO I=1,SIZE(X)
	!		DO J=1,SIZE(Y)
	!			SH(I,J) = SHADOW_SPHEROID(X(I),Y(J),ZMAX)
	!		END DO
	!	END DO
	!ELSE IF (GEOMETRY == "COLLECTION_OF_SPHERES") THEN 
	!	DO I=1,SIZE(X)
	!		DO J=1,SIZE(Y)
	!			SH(I,J) = SHADOW_SPHCOLL(X(I),Y(J),ZMAX)
	!		END DO
	!	END DO
	!ELSE IF (GEOMETRY == "GRID") THEN 
	!	DO I=1,SIZE(X)
	!		DO J=1,SIZE(Y)
	!			SH(I,J) = SHADOW_GRID(X(I),Y(J),ZMAX)
	!		END DO
	!	END DO
	ELSE
		print *,'GEOMETRY = "',GEOMETRY,'" is not a valid option.'
		call exit()
	END IF  
	

	FTSH = FFT(SH,X,Y)

	KX = GET_K(X)
	KY = GET_K(Y)

	DO I=1,SIZE(X)
		DO J=1,SIZE(Y)
			FTSH(I,J) = FTSH(I,J)*(K**2)/(2*PI)*DX*DY
		END DO
	END DO

	DO I=1,SIZE(KX)
		THETAX(I) = ASIN(KX(I)/K)
		THETAY(I) = ASIN(KY(I)/K)
	END DO

	PRINT *,"#THETA (RADIANS)   [DSCAT/DOMEGA (X-AXIS)] [DSCAT/DOMEGA (Y-AXIS)]"
	DO I=1,SIZE(X)
		SCATTERX(I) = (ABS(FTSH(I,1))**2)/(K**2)
		SCATTERY(I) = (ABS(FTSH(1,I))**2)/(K**2)
		PRINT *,THETAX(I),' ',SCATTERX(I)/(PI*A_EFF**2),' ',SCATTERY(I)/(PI*A_EFF**2)
	END DO
CONTAINS

FUNCTION GET_K(X)
	IMPLICIT NONE
	REAL, INTENT(IN) :: X(:)
	INTEGER :: N, I, J 
	REAL :: L
	REAL, DIMENSION(SIZE(X)) :: GET_K
	N = SIZE(X)
    L = X(N) - X(1)
    DO I=1,N
    	GET_K(I) = (2*PI*(I-1))/L
    END DO
END FUNCTION GET_K


END PROGRAM GGADT

