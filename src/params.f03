! Parameter file for GGADT.
MODULE PARAMS

SAVE


REAL, PARAMETER					::	A_EFF				= 0.2				! Micrometers
REAL, PARAMETER					::	EPHOT				= 0.5				! keV
CHARACTER(LEN=30), PARAMETER 	::	GEOMETRY 			= 'ELLIPSOID'	 		! SPHERE, ELLIPSOID, SPHERES
CHARACTER(LEN=30), PARAMETER 	::	EULER_ANGLE_MODE 	= 'RANDOM'  		! RANDOM or SEQUENTIAL

INTEGER, PARAMETER 				:: 	NGRID 				= 2048
INTEGER							::	NANGLE				= 1000
REAL, PARAMETER 				:: 	PI					= 3.14159
REAL, PARAMETER 				::	BOX_WIDTH			= 64.0
REAL, PARAMETER 				::	IOR_IM				=  3.201E-3
REAL, PARAMETER 				:: 	IOR_RE				= -2.079E-3
REAL, dimension(3)				:: 	GRAIN_A 
LOGICAL, PARAMETER 				::	MPI_MODE 			= .FALSE.
CHARACTER(LEN=10), PARAMETER 	::  FFT_TYPE			= "FFTW"


! REAL, PARAMETER 				::	IOR_IM		= 
! REAL, PARAMETER 				:: 	IOR_RE		= 

! if GEOMETRY == GRID:
! ===============================================
! CHARACTER, PARAMETER		:: 	GRID_FILE 	= "ggadt_grid.dat"
! REAL, PARAMETER			::	

! if GEOMETRY == COLLECTION_OF_SPHERES
! CHARACTER, PARAMETER		:: SPHERES_FILE = "ggadt_spheres.dat"
! INTEGER, PARAMETER		:: 


CONTAINS
	FUNCTION ROT_MATRIX(EUL_ANG)
		IMPLICIT NONE
		REAL, DIMENSION(3), INTENT(IN) :: EUL_ANG
		REAL, DIMENSION(3,3) :: ROT_MATRIX
		ROT_MATRIX(1,1) =  COS(EUL_ANG(2))*COS(EUL_ANG(3))
		ROT_MATRIX(1,2) = -COS(EUL_ANG(1))*SIN(EUL_ANG(3))-SIN(EUL_ANG(1))*SIN(EUL_ANG(2))*COS(EUL_ANG(3))
		ROT_MATRIX(1,3) =  SIN(EUL_ANG(1))*SIN(EUL_ANG(3))-COS(EUL_ANG(1))*SIN(EUL_ANG(2))*SIN(EUL_ANG(3))

		ROT_MATRIX(2,1) =  COS(EUL_ANG(2))*SIN(EUL_ANG(3))
		ROT_MATRIX(2,2) =  COS(EUL_ANG(1))*COS(EUL_ANG(3))-SIN(EUL_ANG(1))*SIN(EUL_ANG(2))*SIN(EUL_ANG(3))
		ROT_MATRIX(2,3) = -SIN(EUL_ANG(1))*COS(EUL_ANG(3))-COS(EUL_ANG(1))*SIN(EUL_ANG(2))*SIN(EUL_ANG(3))

		ROT_MATRIX(3,1) =  SIN(EUL_ANG(2))
		ROT_MATRIX(3,2) =  SIN(EUL_ANG(1))*COS(EUL_ANG(2))
		ROT_MATRIX(3,3) =  COS(EUL_ANG(1))*COS(EUL_ANG(2))

	END FUNCTION ROT_MATRIX
	FUNCTION ROT_X(EUL_ANG)
		IMPLICIT NONE
		REAL, INTENT(IN) :: EUL_ANG
		REAL, DIMENSION(3,3) :: ROT_X
		ROT_X(1,1) = 1.0
		ROT_X(1,2) = 0.0
		ROT_X(1,3) = 0.0

		ROT_X(2,1) =  0.0
		ROT_X(2,2) =  COS(EUL_ANG)
		ROT_X(2,3) = -SIN(EUL_ANG)

		ROT_X(3,1) =  0.0
		ROT_X(3,2) =  SIN(EUL_ANG)
		ROT_X(3,3) =  COS(EUL_ANG)

	END FUNCTION ROT_X 
	FUNCTION ROT_Y(EUL_ANG)
		IMPLICIT NONE
		REAL, INTENT(IN) :: EUL_ANG
		REAL, DIMENSION(3,3) :: ROT_Y
		ROT_Y(1,1) = COS(EUL_ANG)
		ROT_Y(1,2) = 0.0
		ROT_Y(1,3) = SIN(EUL_ANG)

		ROT_Y(2,1) =  0.0
		ROT_Y(2,2) =  1.0
		ROT_Y(2,3) =  0.0

		ROT_Y(3,1) = -SIN(EUL_ANG)
		ROT_Y(3,2) =  0.0
		ROT_Y(3,3) =  COS(EUL_ANG)

	END FUNCTION ROT_Y
	FUNCTION ROT_Z(EUL_ANG)
		IMPLICIT NONE
		REAL, INTENT(IN) :: EUL_ANG
		REAL, DIMENSION(3,3) :: ROT_Z
		ROT_Z(1,1) = COS(EUL_ANG)
		ROT_Z(1,2) = SIN(EUL_ANG)
		ROT_Z(1,3) = 0.0

		ROT_Z(2,1) = -SIN(EUL_ANG)
		ROT_Z(2,2) =  COS(EUL_ANG)
		ROT_Z(2,3) =  0.0

		ROT_Z(3,1) = 0.0
		ROT_Z(3,2) = 0.0
		ROT_Z(3,3) = 1.0

	END FUNCTION ROT_Z
END MODULE PARAMS